{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["DATASETCONFIG","display","path","type","DatasetType","Chess","Rubik","Neural","Story","Go","None","Cohort_Analysis","api","API","createRootReducer","store","dispatch","setDatasetEntriesAction","CIMEApp","context","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kQAaaA,EAAgB,CAC3B,CACEC,QAAS,mBACTC,KAAM,8BACNC,KAAMC,cAAYC,OAEpB,CACEJ,QAAS,mBACTC,KAAM,8BACNC,KAAMC,cAAYC,OAEpB,CACEJ,QAAS,4BACTC,KAAM,sCACNC,KAAMC,cAAYC,OAEpB,CACEJ,QAAS,gCACTC,KAAM,+BACNC,KAAMC,cAAYC,OAEpB,CACEJ,QAAS,+BACTC,KAAM,+CACNC,KAAMC,cAAYE,OAEpB,CACEL,QAAS,0BACTC,KAAM,6BACNC,KAAMC,cAAYE,OAEpB,CACEL,QAAS,gCACTC,KAAM,gDACNC,KAAMC,cAAYE,OAEpB,CACEL,QAAS,2BACTC,KAAM,8BACNC,KAAMC,cAAYE,OAEpB,CACEL,QAAS,iCACTC,KAAM,iDACNC,KAAMC,cAAYE,OAEpB,CACEL,QAAS,4BACTC,KAAM,+BACNC,KAAMC,cAAYE,OAEpB,CACEL,QAAS,kBACTC,KAAM,qCACNC,KAAMC,cAAYG,QAEpB,CACEN,QAAS,2BACTC,KAAM,qCACNC,KAAMC,cAAYG,QAEpB,CACEN,QAAS,cACTC,KAAM,uCACNC,KAAMC,cAAYG,QAEpB,CACEN,QAAS,uBACTC,KAAM,uCACNC,KAAMC,cAAYG,QAEpB,CACEN,QAAS,oBACTC,KAAM,+BACNC,KAAMC,cAAYI,OAEpB,CACEP,QAAS,uBACTC,KAAM,oDACNC,KAAMC,cAAYI,OAEpB,CACEP,QAAS,cACTC,KAAM,iCACNC,KAAMC,cAAYI,OAEpB,CACEP,QAAS,qBACTC,KAAM,2BACNC,KAAMC,cAAYK,IAEpB,CACER,QAAS,yBACTC,KAAM,4BACNC,KAAMC,cAAYK,IAEpB,CACER,QAAS,8BACTC,KAAM,+BACNC,KAAMC,cAAYK,IAEpB,CACER,QAAS,YACTC,KAAM,wBACNC,KAAMC,cAAYM,MAEpB,CACET,QAAS,aACTC,KAAM,uBACNC,KAAMC,cAAYM,MAEpB,CACET,QAAS,WACTC,KAAM,6CACNC,KAAMC,cAAYM,MAEpB,CACET,QAAS,2BACTC,KAAM,6DACNC,KAAMC,cAAYO,iBAEpB,CACEV,QAAS,uDACTC,KAAM,iFACNC,KAAMC,cAAYO,kBAIhBC,EAAM,IAAIC,MAAe,KAAMC,4BAAkB,KAEvDF,EAAIG,MAAMC,SAASC,kCAAwBjB,IAU5BkB,MARR,WACL,OACE,cAAC,qBAAD,CAAoBC,QAASP,EAA7B,SACE,cAAC,cAAD,OCtISQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.002d4cca.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\nimport {\n  API,\n  Application,\n  createRootReducer,\n  DatasetType,\n  PSEContextProvider,\n  RootState,\n  setDatasetEntriesAction\n} from \"projection-space-explorer\";\n\nexport const DATASETCONFIG = [\n  {\n    display: \"Chess: 190 Games\",\n    path: \"datasets/chess/chess16k.csv\",\n    type: DatasetType.Chess,\n  },\n  {\n    display: \"Chess: 450 Games\",\n    path: \"datasets/chess/chess40k.csv\",\n    type: DatasetType.Chess,\n  },\n  {\n    display: \"Chess: 450 Games (Groups)\",\n    path: \"datasets/chess/chess40k_groups.json\",\n    type: DatasetType.Chess,\n  },\n  {\n    display: \"Chess: AlphaZero vs Stockfish\",\n    path: \"datasets/chess/alphazero.csv\",\n    type: DatasetType.Chess,\n  },\n  {\n    display: \"Rubik: 1x2 Different Origins\",\n    path: \"datasets/rubik/cube1x2_different_origins.csv\",\n    type: DatasetType.Rubik,\n  },\n  {\n    display: \"Rubik: 1x2 Same Origins\",\n    path: \"datasets/rubik/cube1x2.csv\",\n    type: DatasetType.Rubik,\n  },\n  {\n    display: \"Rubik: 10x2 Different Origins\",\n    path: \"datasets/rubik/cube10x2_different_origins.csv\",\n    type: DatasetType.Rubik,\n  },\n  {\n    display: \"Rubik: 10x2 Same Origins\",\n    path: \"datasets/rubik/cube10x2.csv\",\n    type: DatasetType.Rubik,\n  },\n  {\n    display: \"Rubik: 100x2 Different Origins\",\n    path: \"datasets/rubik/cube100x2_different_origins.csv\",\n    type: DatasetType.Rubik,\n  },\n  {\n    display: \"Rubik: 100x2 Same Origins\",\n    path: \"datasets/rubik/cube100x2.csv\",\n    type: DatasetType.Rubik,\n  },\n  {\n    display: \"NN: Rnd Weights\",\n    path: \"datasets/neural/random_weights.csv\",\n    type: DatasetType.Neural,\n  },\n  {\n    display: \"NN: Rnd Confusion Matrix\",\n    path: \"datasets/neural/random_confmat.csv\",\n    type: DatasetType.Neural,\n  },\n  {\n    display: \"NN: Weights\",\n    path: \"datasets/neural/learning_weights.csv\",\n    type: DatasetType.Neural,\n  },\n  {\n    display: \"NN: Confusion Matrix\",\n    path: \"datasets/neural/learning_confmat.csv\",\n    type: DatasetType.Neural,\n  },\n  {\n    display: \"Story: With Names\",\n    path: \"datasets/story/withnames.csv\",\n    type: DatasetType.Story,\n  },\n  {\n    display: \"Story: No Duplicates\",\n    path: \"datasets/story/stories_dup-del_p50_with-names.csv\",\n    type: DatasetType.Story,\n  },\n  {\n    display: \"Story: Test\",\n    path: \"datasets/story/teststories.csv\",\n    type: DatasetType.Story,\n  },\n  {\n    display: \"Go: State features\",\n    path: \"datasets/go/combined.csv\",\n    type: DatasetType.Go,\n  },\n  {\n    display: \"Go: Histogram features\",\n    path: \"datasets/go/histogram.csv\",\n    type: DatasetType.Go,\n  },\n  {\n    display: \"Go: Move features (wavelet)\",\n    path: \"datasets/go/move_wavelet.csv\",\n    type: DatasetType.Go,\n  },\n  {\n    display: \"Toy: Iris\",\n    path: \"datasets/toy/iris.csv\",\n    type: DatasetType.None,\n  },\n  {\n    display: \"Toy: Story\",\n    path: \"datasets/toy/toy.csv\",\n    type: DatasetType.None,\n  },\n  {\n    display: \"Penguins\",\n    path: \"datasets/penguins/penguins_without_nan.csv\",\n    type: DatasetType.None,\n  },\n  {\n    display: \"Cohort: TCGA Sub-sampled\",\n    path: \"datasets/coral/coral_subsampled_normalized_no_one_hot.json\",\n    type: DatasetType.Cohort_Analysis,\n  },\n  {\n    display: \"Cohort: TCGA Lung, Colorectal, and Pancreatic Cancer\",\n    path: \"datasets/coral/coral_usecase_3TumorTypes_expression_normalized_no_one_hot.json\",\n    type: DatasetType.Cohort_Analysis,\n  },\n];\n\nconst api = new API<RootState>(null, createRootReducer({}));\n\napi.store.dispatch(setDatasetEntriesAction(DATASETCONFIG));\n\nexport function CIMEApp() {\n  return (\n    <PSEContextProvider context={api}>\n      <Application />\n    </PSEContextProvider>\n  );\n}\n\nexport default CIMEApp;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CIMEApp from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <CIMEApp />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}